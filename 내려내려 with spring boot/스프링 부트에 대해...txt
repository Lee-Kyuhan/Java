독립적이고 실제 제품수준의 스프링 기반의 애플리케이션을 만들기 쉽게 해준다.
최소한의 노력으로 시작이 가능
스프링에 대한 지식 거의 없이 사용가능함
그러나 백기선은 동의하지 않음..(여러 설정에 관련하여)
자바 -jar로 묶어서 쉽게 배포 가능 ( 스프링 부트의 큰 장점 )
커맨드 라인 툴도 제공함

이클립스 컨트롤D = 줄삭제 명령

스프링부트 레퍼런스 문서에서
jsp보다는 타임리프를 사용하는게 좋다고함

스프링부트는 스프링의 서브프로젝트라고 할 수 있다.
기존의 스프링 개발 방식에서 불편했던 설정이나 버전충돌등의 불편했던 점들을 없애는 대신
빠르고 쉬운 서버 환경과 테스트 환경 등을 한번에 제공 훨신 간편한 개발 환경 마련

스프링부트 = 스프링 + 테스트/서버 환경 - 복잡한 구성
별도의 서버 설정 없이 main() 메서드를 실행하는것 만으로도 내장된 톰켓 서버 이용해서 프로젝트가 실행됨

스프링 부트의 장점
1. 자동화된 라이브러리 관리
 - 메이븐이나 그래들을 이용해 기존의 라이브러리 추가작업이 더 간단히 처리가능

2. spring boot auto configure
 - 현재 프로젝트에 추가된 라이브러리를 이용해 자동으로 실행에 필요한 환경을 구성함
  ex) 화면 구성할 때 특정 라이브러리를 사용하기로 결정했다면 이에 관련된 설정을 자동으로 구성해줌

3. 적당한 라이브러리 자동 결정과 XML없는 환경 구축
 - 현재 버전에 맞는 관련 라이브러리들을 자동으로 결정함
 - 이기능 덕에 라이브러리 버전이 달라서 정상적으로 동작이 안되는 상황 X
 - 이전처럼 XML을 이용해 라이브러리를 매번 설정하는 과정 줄이고 개발에 집중할 수 있는 환경 제공

4. 테스트 환경과 내장 tomcat
 - 스프링 부트를 이용해서 생성하는 프로젝트는 기본적으로 tomcat을 내장하고 있음.
 - 실행역시 별도 설정 없이 main 메소드 실행하는 방식으로 서버 구동 -> 빠른 결과 확인가능

※ JPA
 - 자바를 이용해서 데이터 관리(유지)하는 기법을 하나의 스펙으로 정리한 표준
 - ORM의 개념을 자바에서 구현하기 위한 스펙 
 - 장점 1 : 데이터베이스가 변경되도 기존 소스코드에 영향을 미치지 않도록 유연함을 얻을 수 있게함
   장점 2 : 데이터베이스의 버전이 달라져도 불편함이 적다.
   단점 1 : 학습곡선이 큼
   단점 2 : 객체지향에 대한 수준높은 숙련도 필요
   단점 3 : 독립적인 개발이 불가능함 

※ 스프링의 정의
- 스프링 프레임워크(Spring Framework)는 자바 플랫폼을 위한 오픈소스 애플리케이션 프레임워크로서, 동적인 웹 사이트를 개발하기 위한 여러 가지 서비스를 제공하고 있다. 대한민국 공공기관의 웹 서비스 개발 시 사용을 권장하고 있는 전자정부 표준프레임워크의 기반 기술로서 쓰이고 있다.

※ 스프링의 특징
- 경량 컨테이너로서 자바 객체를 직접 관리한다. 각각의 객체 생성, 소멸과 같은 라이프 사이클을 관리하며 스프링으로부터 필요한 객체를 얻어올 수 있다.

- 스프링은 POJO(Plain Old Java Object) 방식의 프레임워크이다. 일반적인 J2EE 프레임워크에 비해 구현을 위해 특정한 인터페이스를 구현하거나 상속을 받을 필요가 없어 기존에 존재하는 라이브러리 등을 지원하기에 용이하고 객체가 가볍다.

- 스프링은 제어 반전(IoC : Inversion of Control)을 지원한다. 컨트롤의 제어권이 사용자가 아니라 프레임워크에 있어서 필요에 따라 스프링에서 사용자의 코드를 호출한다.

- 스프링은 의존성 주입(DI : Dependency Injection)을 지원한다. 각각의 계층이나 서비스들 간에 의존성이 존재할 경우 프레임워크가 서로 연결시켜준다.

- 스프링은 관점 지향 프로그래밍(AOP : Aspect-Oriented Programming)을 지원한다. 따라서 트랜잭션이나 로깅, 보안과 같이 여러 모듈에서 공통적으로 사용하는 기능의 경우 해당 기능을 분리하여 관리할 수 있다.

- 스프링은 영속성과 관련된 다양한 서비스를 지원한다. iBATIS나 Hibernate 등 이미 완성도가 높은 데이터베이스 처리 라이브러리와 연결할 수 있는 인터페이스를 제공한다.

- 스프링은 확장성이 높다. 스프링 프레임워크에 통합하기 위해 간단하게 기존 라이브러리를 감싸는 정도로 스프링에서 사용이 가능하기 때문에 수많은 라이브러리가 이미 스프링에서 지원되고 있고 스프링에서 사용되는 라이브러리를 별도로 분리하기도 용이하다.

※ MVC 모델
- 웹에서 가장 많이 사용되는 소프트웨어 디자인 패턴은 모델-뷰-컨트롤러 모델 Model-View-Controller
- MVC는 사용자 인터페이스와 비즈니스 로직을 분리하여 애플리케이션의 서로간의 간섭없이 개발 할 수 있는 모델입니다.

@RestController : 메시지를 전송할때 씀

@GetMapping ; 위와 동일

@Autowired ; 

@RequestMapping : 
요청 URL을 어떤 메서드가 처리할지 mapping해주는 애노테이션이다.
컨트롤러나 컨트롤러의 메서드에 적용한다.
@RequestMapping("/list"), @RequestMapping("/home, /about");
@RequestMapping("/admin", method=RequestMethod.GET)

@controller : 웹서버 전체를 통제하겠다

의존성을 통해서 서버를 거쳐 프로그램 api를 다운받아 
메이븐 : 아파치기반 서버를 열어주는것


지하철역 모든 데이터 INSERT해서
로컬 db에 집에 넣고

나의 현재 역을 1. 알아서 잡아줄건지
	        2. 사용자가 선택할것인지

도착역 설정은 검색키와 데이터베이스에 저장된 지하철역과 일치하면 리스트 나열


Maven vs Gradle
※Maven
아파치 










